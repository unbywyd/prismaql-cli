{"version":3,"sources":["../../src/bin.ts"],"sourcesContent":["import chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\nimport { PrismaHighlighter } from \"prismalux\";\r\nimport boxen from \"boxen\";\r\nimport { mutationsHandler, prismaQlParser, PrismaQlProvider, PrismaQlRelationCollector, PrismaQlSchemaLoader, queryRendersHandler } from \"prismaql\";\r\nconst manager = new PrismaQlSchemaLoader(new PrismaQlRelationCollector());\r\nconst highlightPrismaSchema = new PrismaHighlighter();\r\n\r\nconst confirm = async (msg: string) => {\r\n    console.log(boxen(\r\n        highlightPrismaSchema.highlight(msg),\r\n        { padding: 1, margin: 1, borderStyle: \"double\" }\r\n    ));\r\n\r\n    console.log(chalk.greenBright(\"ðŸŽ‰ðŸŽ‰ðŸŽ‰ Mutation is valid and can be applied.\\n\"));\r\n    const { confirm } = await inquirer.prompt({\r\n        type: \"confirm\",\r\n        name: \"confirm\",\r\n        message: chalk.yellowBright(\"Do you want to overwrite the Prisma file with these changes?\"),\r\n    });\r\n    return confirm;\r\n}\r\n\r\nconst loadQueryRenderManager = async (options: Record<string, boolean | string | number> = {}) => {\r\n    await manager.loadFromFile();\r\n    const provider = new PrismaQlProvider({\r\n        queryHandler: queryRendersHandler,\r\n        mutationHandler: mutationsHandler,\r\n        loader: manager,\r\n    })\r\n    return (sourceCommand: string) => {\r\n        if (sourceCommand?.split(';').length > 2) {\r\n            return provider.multiApply(sourceCommand, {\r\n                save: true,\r\n                dryRun: options.dry as boolean,\r\n                confirm: confirm\r\n            }).then(res => {\r\n                res.forEach((r, i) => {\r\n                    if (r?.result) {\r\n                        console.log(chalk.greenBright(`Command ${i + 1} result:`), `\\n${r.result}`);\r\n                    } else {\r\n                        console.error(`Command ${i + 1} error: ${r.error}`);\r\n                    }\r\n                });\r\n                console.log(chalk.greenBright(\"\\nAll commands applied\"));\r\n            }).catch(e => {\r\n                console.error(`Error: ${e.message}`);\r\n            });\r\n        }\r\n        const isValid = prismaQlParser.isValid(sourceCommand);\r\n        if (isValid instanceof Error) {\r\n            console.log(chalk.redBright(`Invalid command: ${isValid.message}`));\r\n            console.log(chalk.yellowBright(\"Example command pattern: ACTION COMMAND ...args ({prismaBlock}) (options);\"));\r\n            return;\r\n        } else {\r\n            console.log(chalk.greenBright(\"Command is valid\"));\r\n        }\r\n        provider.apply(sourceCommand, {\r\n            save: true,\r\n            dryRun: options.dry as boolean,\r\n            confirm: confirm\r\n        }).then(res => {\r\n            if (res?.response?.result) {\r\n                console.log(res.response.result);\r\n            } else {\r\n                console.error(`Error: ${res.response.error}`);\r\n            }\r\n        }).catch(e => {\r\n            console.log(chalk.redBright(`Error: ${e.message}`));\r\n        });\r\n    }\r\n}\r\nexport default loadQueryRenderManager;"],"mappings":"AAAA,OAAO,WAAW;AAClB,OAAO,cAAc;AACrB,SAAS,yBAAyB;AAClC,OAAO,WAAW;AAClB,SAAS,kBAAkB,gBAAgB,kBAAkB,2BAA2B,sBAAsB,2BAA2B;AACzI,MAAM,UAAU,IAAI,qBAAqB,IAAI,0BAA0B,CAAC;AACxE,MAAM,wBAAwB,IAAI,kBAAkB;AAEpD,MAAM,UAAU,OAAO,QAAgB;AACnC,UAAQ,IAAI;AAAA,IACR,sBAAsB,UAAU,GAAG;AAAA,IACnC,EAAE,SAAS,GAAG,QAAQ,GAAG,aAAa,SAAS;AAAA,EACnD,CAAC;AAED,UAAQ,IAAI,MAAM,YAAY,qEAAgD,CAAC;AAC/E,QAAM,EAAE,SAAAA,SAAQ,IAAI,MAAM,SAAS,OAAO;AAAA,IACtC,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS,MAAM,aAAa,8DAA8D;AAAA,EAC9F,CAAC;AACD,SAAOA;AACX;AAEA,MAAM,yBAAyB,OAAO,UAAqD,CAAC,MAAM;AAC9F,QAAM,QAAQ,aAAa;AAC3B,QAAM,WAAW,IAAI,iBAAiB;AAAA,IAClC,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,QAAQ;AAAA,EACZ,CAAC;AACD,SAAO,CAAC,kBAA0B;AAC9B,QAAI,eAAe,MAAM,GAAG,EAAE,SAAS,GAAG;AACtC,aAAO,SAAS,WAAW,eAAe;AAAA,QACtC,MAAM;AAAA,QACN,QAAQ,QAAQ;AAAA,QAChB;AAAA,MACJ,CAAC,EAAE,KAAK,SAAO;AACX,YAAI,QAAQ,CAAC,GAAG,MAAM;AAClB,cAAI,GAAG,QAAQ;AACX,oBAAQ,IAAI,MAAM,YAAY,WAAW,IAAI,CAAC,UAAU,GAAG;AAAA,EAAK,EAAE,MAAM,EAAE;AAAA,UAC9E,OAAO;AACH,oBAAQ,MAAM,WAAW,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE;AAAA,UACtD;AAAA,QACJ,CAAC;AACD,gBAAQ,IAAI,MAAM,YAAY,wBAAwB,CAAC;AAAA,MAC3D,CAAC,EAAE,MAAM,OAAK;AACV,gBAAQ,MAAM,UAAU,EAAE,OAAO,EAAE;AAAA,MACvC,CAAC;AAAA,IACL;AACA,UAAM,UAAU,eAAe,QAAQ,aAAa;AACpD,QAAI,mBAAmB,OAAO;AAC1B,cAAQ,IAAI,MAAM,UAAU,oBAAoB,QAAQ,OAAO,EAAE,CAAC;AAClE,cAAQ,IAAI,MAAM,aAAa,4EAA4E,CAAC;AAC5G;AAAA,IACJ,OAAO;AACH,cAAQ,IAAI,MAAM,YAAY,kBAAkB,CAAC;AAAA,IACrD;AACA,aAAS,MAAM,eAAe;AAAA,MAC1B,MAAM;AAAA,MACN,QAAQ,QAAQ;AAAA,MAChB;AAAA,IACJ,CAAC,EAAE,KAAK,SAAO;AACX,UAAI,KAAK,UAAU,QAAQ;AACvB,gBAAQ,IAAI,IAAI,SAAS,MAAM;AAAA,MACnC,OAAO;AACH,gBAAQ,MAAM,UAAU,IAAI,SAAS,KAAK,EAAE;AAAA,MAChD;AAAA,IACJ,CAAC,EAAE,MAAM,OAAK;AACV,cAAQ,IAAI,MAAM,UAAU,UAAU,EAAE,OAAO,EAAE,CAAC;AAAA,IACtD,CAAC;AAAA,EACL;AACJ;AACA,IAAO,cAAQ;","names":["confirm"]}