{"version":3,"sources":["../../src/bin.ts","../../src/index.ts"],"sourcesContent":["import chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\nimport { PrismaHighlighter } from \"prismalux\";\r\nimport boxen from \"boxen\";\r\nimport { mutationsHandler, prismaQlParser, PrismaQlProvider, PrismaQlRelationCollector, PrismaQlSchemaLoader, queryRendersHandler } from \"prismaql\";\r\nconst manager = new PrismaQlSchemaLoader(new PrismaQlRelationCollector());\r\nconst highlightPrismaSchema = new PrismaHighlighter();\r\n\r\nconst confirm = async (msg: string) => {\r\n    console.log(boxen(\r\n        highlightPrismaSchema.highlight(msg),\r\n        { padding: 1, margin: 1, borderStyle: \"double\" }\r\n    ));\r\n\r\n    console.log(chalk.greenBright(\"ðŸŽ‰ðŸŽ‰ðŸŽ‰ Mutation is valid and can be applied.\\n\"));\r\n    const { confirm } = await inquirer.prompt({\r\n        type: \"confirm\",\r\n        name: \"confirm\",\r\n        message: chalk.yellowBright(\"Do you want to overwrite the Prisma file with these changes?\"),\r\n    });\r\n    return confirm;\r\n}\r\n\r\nconst loadQueryRenderManager = async (options: Record<string, boolean | string | number> = {}) => {\r\n    await manager.loadFromFile();\r\n    const provider = new PrismaQlProvider({\r\n        queryHandler: queryRendersHandler,\r\n        mutationHandler: mutationsHandler,\r\n        loader: manager,\r\n    })\r\n    return (sourceCommand: string) => {\r\n        if (sourceCommand?.split(';').length > 2) {\r\n            return provider.multiApply(sourceCommand, {\r\n                save: true,\r\n                dryRun: options.dry as boolean,\r\n                confirm: confirm\r\n            }).then(res => {\r\n                res.forEach((r, i) => {\r\n                    if (r?.result) {\r\n                        console.log(chalk.greenBright(`Command ${i + 1} result: \\n${r.result}`));\r\n                    } else {\r\n                        console.error(`Command ${i + 1} error: ${r.error}`);\r\n                    }\r\n                });\r\n                console.log(chalk.greenBright(\"\\nAll commands applied\"));\r\n            }).catch(e => {\r\n                console.error(`Error: ${e.message}`);\r\n            });\r\n        }\r\n        const isValid = prismaQlParser.isValid(sourceCommand);\r\n        if (isValid instanceof Error) {\r\n            console.log(chalk.redBright(`Invalid command: ${isValid.message}`));\r\n            console.log(chalk.yellowBright(\"Example command pattern: ACTION COMMAND ...args (options) ({prismaBlock})\"));\r\n            return;\r\n        } else {\r\n            console.log(chalk.greenBright(\"Command is valid\"));\r\n        }\r\n        provider.apply(sourceCommand, {\r\n            save: true,\r\n            dryRun: options.dry as boolean,\r\n            confirm: confirm\r\n        }).then(res => {\r\n            if (res?.response?.result) {\r\n                console.log(chalk.greenBright(res.response.result));\r\n            } else {\r\n                console.error(`Error: ${res.response.error}`);\r\n            }\r\n        }).catch(e => {\r\n            console.log(chalk.redBright(`Error: ${e.message}`));\r\n        });\r\n    }\r\n}\r\nexport default loadQueryRenderManager;","#!/usr/bin/env node\r\nimport loadQueryRenderManager from './bin.js';\r\nimport { readFileSync } from 'fs';\r\nimport { resolve } from 'path';\r\n\r\nconst { version } = JSON.parse(readFileSync(resolve(process.cwd(), 'package.json'), 'utf-8'));\r\n\r\nfunction showHelp() {\r\n  console.log(`\r\nUsage: prismaql <command> [--dry]\r\n\r\nOptions:\r\n  --dry    Perform a dry run without applying changes\r\n  --help   Show this help message\r\n  --version  Show the CLI version\r\n\r\nExamples:\r\n  prismaql \"GET MODEL User;\"\r\n  prismaql \"ADD FIELD name ({String});\" --dry\r\n`);\r\n}\r\n\r\nasync function main() {\r\n  const args = process.argv.slice(2);\r\n  if (args.length === 0 || args.includes('--help')) {\r\n    showHelp();\r\n    process.exit(0);\r\n  }\r\n\r\n  if (args.includes('--version')) {\r\n    console.log(`PrismaQL CLI v${version}`);\r\n    process.exit(0);\r\n  }\r\n\r\n  const command = args.find(arg => !arg.startsWith('--'));\r\n  if (!command) {\r\n    console.error(\"Error: Missing command. Use --help for usage information.\");\r\n    process.exit(1);\r\n  }\r\n\r\n  const options = {\r\n    dry: args.includes('--dry')\r\n  };\r\n\r\n  try {\r\n    const queryManager = await loadQueryRenderManager(options);\r\n    await queryManager(command);\r\n  } catch (error) {\r\n    console.error(\"Error parsing command:\", error.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nmain();\r\n"],"mappings":"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","names":["confirm"]}